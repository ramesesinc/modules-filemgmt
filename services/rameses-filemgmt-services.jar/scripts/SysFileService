import com.rameses.annotations.*;

class SysFileService {
	
	@DataContext('sys_file')
	def file_db; 

	@DataContext('sys_fileitem')
	def fileitem_db; 

	@DataContext('sys_fileloc')
	def fileloc_db; 

	@Service('DateService')
	def dateSvc; 

	@Env
	def env; 

	@ProxyMethod 
	public def create( param ) { 
		param.dtcreated = dateSvc.getServerDate(); 
		param.createdby = [ objid: env.USERID, name:  env.FULLNAME ]; 
		
		def fhead = file_db.create( param ); 
		def items = param.items; 
		items.each{ o-> 
			o.parentid = fhead.objid; 
			o.dtcreated = fhead.dtcreated;
			o.createdby = fhead.createdby;
			def fi = fileitem_db.create( o ); 
			if ( fi ) o.putAll( fi );   
		} 

		param.putAll( fhead ); 
		param.items = items; 
		return param;  
	}

	@ProxyMethod 
	public def read( param ) {
		def data = file_db.find([ objid: param.objid.toString() ]).first(); 
		if ( data ) {
			data.items = fileitem_db.find([ parentid: data.objid ]).list(); 
			data.items.each{ 
				it.fileloc = fileloc_db.find([ objid: it.filelocid ]).first(); 
			} 
		} 
		return data; 
	}

	@ProxyMethod 
	public def remove( param ) {
		def fileid = param.objid.toString();
		def o = file_db.find([ objid: fileid ]).select('objid,filetype').first(); 
		if ( o?.objid ) {
			def res = [ objid: o.objid, items: []]; 
			fileitem_db.find([ parentid: fileid ]).select('objid,filelocid').list().each{
				it.fileloc = fileloc_db.find([ objid: it.filelocid ]).first(); 
				it.filetype = o.filetype; 
				res.items << it; 
			}

			fileitem_db.find([ parentid: fileid ]).delete();
			file_db.find([ objid: fileid ]).delete();
			res.status = 'success';
			return res; 
		}
		return [status: 'not-found'];
	}
}